#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef THREEDS_SDK_SWIFT_H
#define THREEDS_SDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ThreeDS_SDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// Hold transaction data that the App passes to the 3DS Server for creating the AReq
SWIFT_CLASS_NAMED("AuthenticationRequestParameters")
@interface NCAAuthenticationRequestParameters : NSObject
- (nullable instancetype)initWithSdkTransactionId:(NSString * _Nonnull)sdkTransactionId deviceData:(NSString * _Nonnull)deviceData sdkEphemeralPublicKey:(NSString * _Nonnull)sdkEphemeralPublicKey sdkAppId:(NSString * _Nonnull)sdkAppId sdkReferenceNumber:(NSString * _Nonnull)sdkReferenceNumber messageVersion:(NSString * _Nonnull)messageVersion error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Returns a string that represents the encrypted device data
///
/// returns:
/// The encrypted device data as a JWE string
- (NSString * _Nonnull)getDeviceData SWIFT_WARN_UNUSED_RESULT;
/// Returns the SDK Transaction ID
///
/// returns:
/// Returns the Transaction ID as a string
- (NSString * _Nonnull)getSDKTransactionId SWIFT_WARN_UNUSED_RESULT;
/// Returns the SDK App ID
///
/// returns:
/// Returns the SDK App ID as a string
- (NSString * _Nonnull)getSDKAppID SWIFT_WARN_UNUSED_RESULT;
/// Returns the SDK Reference Number
///
/// returns:
/// The SDK Reference Number as a string
- (NSString * _Nonnull)getSDKReferenceNumber SWIFT_WARN_UNUSED_RESULT;
/// Returns the SDK Ephemeral Public Key as a String representation of a JWK object
///
/// returns:
/// The public key component of the ephemeral key pair as a String representation
/// of a JWK object
- (NSString * _Nonnull)getSDKEphemeralPublicKey SWIFT_WARN_UNUSED_RESULT;
/// Returns the protocol version that is used for the transaction
///
/// returns:
/// the protocol version as a string
- (NSString * _Nonnull)getMessageVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NCAAuthenticationRequestParameters (SWIFT_EXTENSION(ThreeDS_SDK)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// Provides methods to pass UI customization parameters to the 3DS SDK.
SWIFT_CLASS_NAMED("Customization")
@interface NCACustomization : NSObject <NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Setter for the text font name
/// \param fontName The name of the font
///
///
/// throws:
/// InvalidInput
- (BOOL)setTextFontNameWithFontName:(NSString * _Nonnull)fontName error:(NSError * _Nullable * _Nullable)error;
/// Setter for the text color
/// \param hexColorCode a hex code representation of the required color as String
///
///
/// throws:
/// InvalidInput
- (BOOL)setTextColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error;
/// Setter for the dark text color
/// \param hexColorCode a hex code representation of the required color as String
///
///
/// throws:
/// InvalidInput
- (BOOL)setDarkTextColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("\n    Starting with protocol version 2.3.1, for dark mode UI customization,\n    the integrators shall use setTextColor(...) and insert\n    the UiCustomization object into the uiCustomizationMap with key \"DARK\".\n    ");
/// Setter fot the text font size
/// \param fontSize the font size given as an integer value
///
///
/// throws:
/// InvalidInput
- (BOOL)setTextFontSizeWithFontSize:(NSInteger)fontSize error:(NSError * _Nullable * _Nullable)error;
/// Returns the text font name
///
/// returns:
/// String value of the font name or nil if non specified
- (NSString * _Nonnull)getTextFontName SWIFT_WARN_UNUSED_RESULT;
/// Returns the text color as a hex code representation of the given color or nil if non specified
///
/// returns:
/// String of the color in hex code format
- (NSString * _Nonnull)getTextColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the text font size
///
/// returns:
/// Integer value representing the font size or 17 if not set
- (NSInteger)getTextFontSize SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// Provide methods for the 3DS Requestor App to pass button customization parameters to the 3DS SDK.
SWIFT_CLASS_NAMED("ButtonCustomization")
@interface NCAButtonCustomization : NCACustomization
/// Sets the background color of the button.
/// \param hexColorCode Color code in Hex format.
///
///
/// throws:
/// InvalidInput
- (BOOL)setBackgroundColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error;
/// Set the dark background color of the button.
/// \param hexColorCode Color code in Hex format.
///
- (BOOL)setDarkBackgroundColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("\n    Starting with protocol version 2.3.1, for dark mode UI customization,\n    the integrators shall use setBackgroundColor(...) and insert\n    the UiCustomization object into the uiCustomizationMap with key \"DARK\".\n    ");
/// Sets the radius of the button corners.
/// \param cornerRadius Radius (integer value) for the button corners.
///
///
/// throws:
/// InvalidInput
- (BOOL)setCornerRadiusWithCornerRadius:(NSInteger)cornerRadius error:(NSError * _Nullable * _Nullable)error;
/// Returns the background color of the button.
///
/// returns:
/// background color code (as a string) of the button.
- (NSString * _Nonnull)getBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the radius of the button corners.
///
/// returns:
/// the radius (as an integer) of the button corners.
- (NSInteger)getCornerRadius SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The ChallengeParameters class holds the parameters that are required to conduct the challenge
/// process.
SWIFT_CLASS_NAMED("ChallengeParameters")
@interface NCAChallengeParameters : NSObject
- (nonnull instancetype)initWithThreeDSServerTransactionID:(NSString * _Nullable)threeDSServerTransactionID acsTransactionID:(NSString * _Nullable)acsTransactionID acsRefNumber:(NSString * _Nullable)acsRefNumber acsSignedContent:(NSString * _Nullable)acsSignedContent OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the 3DS Server Transaction ID.
/// \param threeDSServerTransactionID Transaction identifier assigned by the 3DS Server
/// to uniquely identify a single transaction.
///
- (void)set3DSServerTransactionIDWithThreeDSServerTransactionID:(NSString * _Nonnull)threeDSServerTransactionID;
/// Sets the ACS Transaction ID.
/// \param acsTransactionID Transaction ID assigned by the ACS to uniquely identify a
/// single transaction.
///
- (void)setAcsTransactionIDWithAcsTransactionID:(NSString * _Nonnull)acsTransactionID;
/// Sets the ACS Reference Number.
/// \param acsRefNumber EMVCo assigns the ACS this identifier after running the EMV 3-D
/// Secure Testing and Approvals process on the ACS.
///
- (void)setAcsRefNumberWithAcsRefNumber:(NSString * _Nonnull)acsRefNumber;
/// Sets the ACS signed content. This data includes the ACS URL, ACS ephemeral public key, and
/// SDK ephemeral public key.
/// \param acsSignedContent ACS signed content. This data includes the ACS URL, ACS
/// ephemeral public key, and SDK ephemeral public key.
///
- (void)setAcsSignedContentWithAcsSignedContent:(NSString * _Nonnull)acsSignedContent;
/// Sets the threeDSRequestorAppURL. This is the URL of the application with which it can be called from
/// another application.
/// \param threeDSRequestorAppURL 3DS Requestor App URL
///
- (void)setThreeDSRequestorAppURLWithThreeDSRequestorAppURL:(NSString * _Nonnull)threeDSRequestorAppURL;
/// Returns the 3DS Server Transaction ID.
///
/// returns:
/// The 3DS Server Transaction ID.
- (NSString * _Nullable)get3DSServerTransactionID SWIFT_WARN_UNUSED_RESULT;
/// Returns the ACS Transaction ID.
///
/// returns:
/// The Acs Transaction ID.
- (NSString * _Nullable)getAcsTransactionID SWIFT_WARN_UNUSED_RESULT;
/// Returns the ACS Reference Number.
///
/// returns:
/// The ACS Reference Number.
- (NSString * _Nullable)getAcsRefNumber SWIFT_WARN_UNUSED_RESULT;
/// Returns the ACS signed content object.
///
/// returns:
/// The ACS signed content object.
- (NSString * _Nullable)getAcsSignedContent SWIFT_WARN_UNUSED_RESULT;
/// Returns the requestor application url that can be used to open the requestor application
- (NSString * _Nullable)getThreeDSRequestorAppURL SWIFT_WARN_UNUSED_RESULT;
@end


@interface NCAChallengeParameters (SWIFT_EXTENSION(ThreeDS_SDK)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@class NCACompletionEvent;
@class NCAProtocolErrorEvent;
@class NCARuntimeErrorEvent;

/// Holds methods which correspond to events that can take place during the authentication process.
SWIFT_PROTOCOL_NAMED("ChallengeStatusReceiver")
@protocol NCAChallengeStatusReceiver
/// Method called when the challenge process is completed.
/// \param completionEvent Information about completion of the challenge process.
///
- (void)completedWithCompletionEvent:(NCACompletionEvent * _Nonnull)completionEvent;
/// Method called when the Cardholder selects the option to cancel the transaction on the
/// challenge screen.
- (void)cancelled;
/// Method called when the challenge process reaches or exceeds the specified timeout.
- (void)timedout;
/// Method called when the 3DS SDK receives an EMV 3-D Secure protocol-defined error message
/// from the ACS.
/// \param protocolErrorEvent Error code and details.
///
- (void)protocolErrorWithProtocolErrorEvent:(NCAProtocolErrorEvent * _Nonnull)protocolErrorEvent;
/// Method called when the 3DS SDK encounters errors during the challenge process.
/// \param runtimeErrorEvent Error code and details.
///
- (void)runtimeErrorWithRuntimeErrorEvent:(NCARuntimeErrorEvent * _Nonnull)runtimeErrorEvent;
@end


/// Holds data about the completion of the challenge process.
SWIFT_CLASS_NAMED("CompletionEvent")
@interface NCACompletionEvent : NSObject
/// Returns the SDK Transaction ID.
///
/// returns:
/// The SDK Transaction ID.
- (NSString * _Nonnull)getSDKTransactionID SWIFT_WARN_UNUSED_RESULT;
/// Returns the transaction status that was received in the final CRes.
///
/// returns:
/// The transaction status that was received in the final CRes.
- (NSString * _Nonnull)getTransactionStatus SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NCACompletionEvent (SWIFT_EXTENSION(ThreeDS_SDK)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@class NCAScheme;
enum NCALogLevel : NSInteger;
@class NCAConfigParameters;

/// Wrapper for the ConfigParam object.
SWIFT_CLASS_NAMED("ConfigurationBuilder")
@interface NCAConfigurationBuilder : NSObject
/// Create  an emprty object with clean config parameters.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add an api key to the ConfigParam object.
/// \param key Value for the key as UUID string.
///
- (BOOL)apiWithKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error;
/// Add restricted device info parameters to the ConfigParameters.
/// \param parameters List of parameters.
///
- (BOOL)restrictedParameters:(NSArray<NSString *> * _Nonnull)parameters error:(NSError * _Nullable * _Nullable)error;
/// Add a scheme object to the configuration.
/// Integrator defined SchemeConfiguration takes priority over prebundled 3DS SDK SchemeConfiguration for use during EMVCo Authentication. If the integrator wishes to utilise the automatic updates of SchemeConfiguration provided by the 3DS SDK, custom encryption certificates for the SDK should not be added/overriden.
/// \param scheme Scheme object.
///
- (BOOL)add:(NCAScheme * _Nonnull)scheme error:(NSError * _Nullable * _Nullable)error;
/// Specify the log level.
/// \param level The desired log level.
///
- (BOOL)logTo:(enum NCALogLevel)level error:(NSError * _Nullable * _Nullable)error;
/// Modifies the support for sending and receiving bridging message extensions. By default the support is disabled.
/// \param enabled Boolean that decides whether bridging message extension is enabled or disabled.
///
- (BOOL)bridgingMessageExtensionEnabled:(BOOL)enabled error:(NSError * _Nullable * _Nullable)error;
/// Modifies the level of validation of the challenge response parameters. If the passed value is equal to true, the 3DS SDK will use weak validation for some of the challenge response parameters. The weak validation removes the mandatory status and the string length validation of several challenge response parameters.
/// note:
/// By using this method the Netcetera 3DS SDK will no longer be compliant with the latest bulletin of the EMVCo Protocol and Core Functions Specification. If any legal actions or consequences arise, the responsibility falls on the integrator of the Netcetera iOS 3DS SDK.
/// \param value Decides whether weak validation should be enabled.
///
- (BOOL)weakValidationEnabled:(BOOL)value error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("The Weak Validation configuration has been restructured and incorporated into the default behaviour of the SDK. As a result, this method should no longer be used and will be removed in the next iteration of the SDK.");
/// Return a created ConfigParameters object.
- (NCAConfigParameters * _Nonnull)configParameters SWIFT_WARN_UNUSED_RESULT;
@end


@interface NCAConfigurationBuilder (SWIFT_EXTENSION(ThreeDS_SDK)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



/// Util class that provides RID - SchemeName mapping.
SWIFT_CLASS_NAMED("DsRidValues")
@interface NCADsRidValues : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mastercard;)
+ (NSString * _Nonnull)mastercard SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull visa;)
+ (NSString * _Nonnull)visa SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull amex;)
+ (NSString * _Nonnull)amex SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull diners;)
+ (NSString * _Nonnull)diners SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy, getter=union) NSString * _Nonnull union_;)
+ (NSString * _Nonnull)union SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull jcb;)
+ (NSString * _Nonnull)jcb SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cartesBancaires;)
+ (NSString * _Nonnull)cartesBancaires SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull eftpos;)
+ (NSString * _Nonnull)eftpos SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Holds an error message that is returned by the ACS to the 3DS SDK or an error message that is
/// generated by the 3DS SDK to be returned to the ACS.
SWIFT_CLASS_NAMED("ErrorMessage")
@interface NCAErrorMessage : NSObject
/// Initialization of the ErrorMessage class.
/// \param transactionID The Transaction ID.
///
/// \param errorCode The error code.
///
/// \param errorDescription The text describing the error.
///
/// \param errorDetail Additional error details.
///
- (nonnull instancetype)initWithTransactionID:(NSString * _Nullable)transactionID errorCode:(NSString * _Nonnull)errorCode errorDescription:(NSString * _Nonnull)errorDescription errorDetail:(NSString * _Nullable)errorDetail errorComponent:(NSString * _Nullable)errorComponent errorMessageType:(NSString * _Nullable)errorMessageType errorMessageVersionNumber:(NSString * _Nullable)errorMessageVersionNumber OBJC_DESIGNATED_INITIALIZER;
/// Returns the Transaction ID.
///
/// returns:
/// The Transaction ID.
- (NSString * _Nonnull)getTransactionID SWIFT_WARN_UNUSED_RESULT;
/// Returns the error code.
///
/// returns:
/// The error code.
- (NSString * _Nonnull)getErrorCode SWIFT_WARN_UNUSED_RESULT;
/// Returns the error description.
///
/// returns:
/// The error description.
- (NSString * _Nonnull)getErrorDescription SWIFT_WARN_UNUSED_RESULT;
/// Returns the error details.
///
/// returns:
/// The error details.
- (NSString * _Nullable)getErrorDetail SWIFT_WARN_UNUSED_RESULT;
/// Returns the component tht identified the error.
///
/// returns:
/// The error component.
- (NSString * _Nonnull)getErrorComponent SWIFT_WARN_UNUSED_RESULT;
/// Returns the Message Type that was identified as erroneous.
///
/// returns:
/// The type of the error message.
- (NSString * _Nonnull)getErrorMessageType SWIFT_WARN_UNUSED_RESULT;
/// Returns the protocol version identifier.
///
/// returns:
/// The protocol version identifier.
- (NSString * _Nonnull)getMessageVersionNumber SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NCAErrorMessage (SWIFT_EXTENSION(ThreeDS_SDK)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// Provide methods for the 3DS Requestor App to pass text box customization parameters to the 3DS SDK.
SWIFT_CLASS_NAMED("LabelCustomization")
@interface NCALabelCustomization : NCACustomization
/// Sets the color of the heading label text.
/// \param hexColorCode Color code in Hex format.
///
///
/// throws:
/// InvalidInputExcpetion
- (BOOL)setHeadingTextColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error;
/// Sets the dark color of the heading label text.
/// \param hexColorCode Color code in Hex format.
///
///
/// throws:
/// InvalidInputExcpetion
- (BOOL)setHeadingDarkTextColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("\n    Starting with protocol version 2.3.1, for dark mode UI customization,\n    the integrators shall use setHeadingTextColor(...) and insert\n    the UiCustomization object into the uiCustomizationMap with key \"DARK\".\n    ");
/// Sets the font type of the heading label text.
/// \param fontName Font type for the heading label text.
///
///
/// throws:
/// InvalidInput
- (BOOL)setHeadingTextFontNameWithFontName:(NSString * _Nonnull)fontName error:(NSError * _Nullable * _Nullable)error;
/// Sets the font size of the heading label text.
/// \param fontSize Font size for the heading label text.
///
///
/// throws:
/// InvalidInput
- (BOOL)setHeadingTextFontSizeWithFontSize:(NSInteger)fontSize error:(NSError * _Nullable * _Nullable)error;
/// Returns the colour of the heading label text.
///
/// returns:
/// The hex color code of the heading label text as a string.
- (NSString * _Nonnull)getHeadingTextColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the font type of the heading label text.
///
/// returns:
/// The font type of the heading label text as a string.
- (NSString * _Nonnull)getHeadingTextFontName SWIFT_WARN_UNUSED_RESULT;
/// Returns the font size of the heading label text.
///
/// returns:
/// The heading text font size as an integer.
- (NSInteger)getHeadingTextFontSize SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NCALogLevel, "LogLevel", open) {
  NCALogLevelDebug = 0,
  NCALogLevelInfo = 1,
  NCALogLevelError = 2,
  NCALogLevelNoLog = 3,
};


/// Protocol containing functions for the progress view.
SWIFT_PROTOCOL_NAMED("ProgressDialog")
@protocol NCAProgressDialog
/// Start the progress dialog as overlay on top of the screens.
- (void)start;
/// Stops the progress dialog.
- (void)stop;
@end


/// Holds any error message that is returned by the ACS or an error message that is generated by
/// the 3DS SDK to be returned to the ACS.
SWIFT_CLASS_NAMED("ProtocolErrorEvent")
@interface NCAProtocolErrorEvent : NSObject
/// Initialization of the ProtocolErrorEvent class.
/// \param sdkTransactionID The SDK Transaction ID.
///
/// \param errorMessage The error message that is returned by or sent to the ACS.
///
- (nonnull instancetype)initWithSdkTransactionID:(NSString * _Nonnull)sdkTransactionID errorMessage:(NCAErrorMessage * _Nonnull)errorMessage OBJC_DESIGNATED_INITIALIZER;
/// Returns the SDK Transaction ID.
///
/// returns:
/// The SDK Transaction ID.
- (NSString * _Nonnull)getSDKTransactionID SWIFT_WARN_UNUSED_RESULT;
/// Returns the error message.
///
/// returns:
/// The error message.
- (NCAErrorMessage * _Nonnull)getErrorMessage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NCAProtocolErrorEvent (SWIFT_EXTENSION(ThreeDS_SDK)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// Holds details of run-time errors that are encountered by the 3DS SDK during authentication.
SWIFT_CLASS_NAMED("RuntimeErrorEvent")
@interface NCARuntimeErrorEvent : NSObject
/// Initialization of the RuntimeErrorEvent class.
/// \param errorCode Implementer-specific error code.
///
/// \param errorMessage Error message.
///
- (nonnull instancetype)initWithErrorCode:(NSString * _Nullable)errorCode errorMessage:(NSString * _Nonnull)errorMessage OBJC_DESIGNATED_INITIALIZER;
/// Returns the implementer-specific error code.
///
/// returns:
/// The implementer-specific error code.
- (NSString * _Nullable)getErrorCode SWIFT_WARN_UNUSED_RESULT;
/// Returns details about the error.
///
/// returns:
/// Details about the error.
- (NSString * _Nonnull)getErrorMessage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NCARuntimeErrorEvent (SWIFT_EXTENSION(ThreeDS_SDK)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// Hold info for Scheme.
SWIFT_CLASS_NAMED("Scheme")
@interface NCAScheme : NSObject <NSCopying>
@property (nonatomic, copy) NSArray<NSString *> * _Nullable ids;
@property (nonatomic, copy) NSString * _Nullable logoImageName;
@property (nonatomic, copy) NSString * _Nullable encryptionKeyValue;
@property (nonatomic, copy) NSString * _Nullable rootCertificateValue SWIFT_DEPRECATED_MSG("Please use `rootCertificateValues` instead.");
@property (nonatomic, copy) NSArray<NSString *> * _Nullable rootCertificateValues;
/// Create an empty object of a scheme.
/// \param name Name of the scheme.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name ids:(NSArray<NSString *> * _Nullable)ids logoImageName:(NSString * _Nullable)logoImageName encryption:(NSString * _Nullable)encryption root:(NSString * _Nullable)root OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Please use the initializer that accepts an array of root certificates.");
/// Create a full object from of a Scheme.
/// \param name Name of the Scheme.
///
/// \param ids Ids of the Scheme.
///
/// \param logoImageName Image Logo name.
///
/// \param encryption Encryption key, pem or location.
///
/// \param roots Array of root certificates.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name ids:(NSArray<NSString *> * _Nullable)ids logoImageName:(NSString * _Nullable)logoImageName encryption:(NSString * _Nullable)encryption roots:(NSArray<NSString *> * _Nullable)roots OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NCAScheme (SWIFT_EXTENSION(ThreeDS_SDK))
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)_ SWIFT_WARN_UNUSED_RESULT;
@end




@interface NCAScheme (SWIFT_EXTENSION(ThreeDS_SDK))
/// Create a scheme with the same name as mastercard.
+ (NCAScheme * _Nonnull)mastercard SWIFT_WARN_UNUSED_RESULT;
/// Create a scheme with the same name as visa.
+ (NCAScheme * _Nonnull)visa SWIFT_WARN_UNUSED_RESULT;
/// Create a scheme with the same name as amex.
+ (NCAScheme * _Nonnull)amex SWIFT_WARN_UNUSED_RESULT;
/// Create a scheme with the same name as diners.
+ (NCAScheme * _Nonnull)diners SWIFT_WARN_UNUSED_RESULT;
/// Create a scheme with the same name as union.
+ (NCAScheme * _Nonnull)union SWIFT_WARN_UNUSED_RESULT;
/// Create a scheme with the same name as jcb.
+ (NCAScheme * _Nonnull)jcb SWIFT_WARN_UNUSED_RESULT;
/// Create a scheme with the same name as cartesBancaires.
+ (NCAScheme * _Nonnull)cb SWIFT_WARN_UNUSED_RESULT;
@end

/// Defines the severity levels of warnings produced by the 3DS SDK while conducting security
/// checks during initialization.
/// <ul>
///   <li>
///     LOW: A low-severity warning
///   </li>
///   <li>
///     MEDIUM: A medium-severity warning
///   </li>
///   <li>
///     HIGH: A high-severity warning
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, NCASeverity, "Severity", open) {
  NCASeverityLOW = 0,
  NCASeverityMEDIUM = 1,
  NCASeverityHIGH = 2,
};


/// Class holding the UI details specific for a TextBox
SWIFT_CLASS_NAMED("TextBoxCustomization")
@interface NCATextBoxCustomization : NCACustomization
/// Sets the width of the text box border.
/// \param borderWidth Width (integer value) of the text box border.
///
///
/// throws:
/// InvalidInput
- (BOOL)setBorderWidthWithBorderWidth:(NSInteger)borderWidth error:(NSError * _Nullable * _Nullable)error;
/// Sets the color of the text box border.
/// \param hexColorCode Color code in Hex format.
///
///
/// throws:
/// InvalidInput
- (BOOL)setBorderColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error;
/// Sets the dark color of the text box border.
/// \param hexColorCode Color code in Hex format.
///
///
/// throws:
/// InvalidInput
- (BOOL)setDarkBorderColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("\n    Starting with protocol version 2.3.1, for dark mode UI customization,\n    the integrators shall use setBorderColor(...) and insert\n    the UiCustomization object into the uiCustomizationMap with key \"DARK\".\n    ");
/// Sets the corner radius of the text box corners.
/// \param cornerRadius Radius (integer value) for the text box corners.
///
///
/// throws:
/// InvalidInput
- (BOOL)setCornerRadiusWithCornerRadius:(NSInteger)cornerRadius error:(NSError * _Nullable * _Nullable)error;
/// Returns the width of the text box border.
///
/// returns:
/// The width (as an integer) of the text box border.
- (NSInteger)getBorderWidth SWIFT_WARN_UNUSED_RESULT;
/// Returns the color of the text box border in hex colour code.
///
/// returns:
/// the hex color code (as a string) of the text box border.
- (NSString * _Nonnull)getBorderColor SWIFT_WARN_UNUSED_RESULT;
/// Gets the corner radius of the text box corners.
///
/// returns:
/// The radius (as an integer) of the text box corners
- (NSInteger)getCornerRadius SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Error related to errors produced by the SDK, and interaction with it.
/// <ul>
///   <li>
///     InvalidInput: represent a run-time error that occurs due to invalid parameter.
///   </li>
///   <li>
///     SDKAlreadyInitialized: represents an error that is thrown if the 3DS SDK instance has already
///     been initialized.
///   </li>
///   <li>
///     SDKNotInitialized: represents an error that is thrown if the 3DS SDK has not been initialized.
///   </li>
///   <li>
///     SDKRuntime: represents an error that is thrown when an internal error is encountered by
///     the 3DS SDK.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ThreeDS2Error")
@interface NCAThreeDS2Error : NSObject
+ (NSError * _Nonnull)InvalidInputWithMessage:(NSString * _Nonnull)message cause:(NSError * _Nullable)cause SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)SDKAlreadyInitializedWithMessage:(NSString * _Nonnull)message cause:(NSError * _Nullable)cause SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)SDKNotInitializedWithMessage:(NSString * _Nonnull)message cause:(NSError * _Nullable)cause SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)SDKRuntimeWithMessage:(NSString * _Nonnull)message errorCode:(NSString * _Nullable)errorCode cause:(NSError * _Nullable)cause SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NCAUiCustomization;
@protocol NCATransaction;
@class NCAWarning;

/// The ThreeDS2Service interface is the main 3DS SDK interface.
/// It provides methods to process transactions.
SWIFT_PROTOCOL_NAMED("ThreeDS2Service")
@protocol NCAThreeDS2Service
/// Initializes the 3DS SDK instance.
/// \param configParameters Configuration information that shall be used during initialization.
///
/// \param locale String that represents the locale for the app’s user interface.
///
/// \param uiCustomization UI configuration information that is used to specify the UI layout and theme. For example, font style and font size.
///
///
/// throws:
/// InvalidInput, SDKAlreadyInitialized, SDKRuntime
- (BOOL)initialize:(NCAConfigParameters * _Nonnull)configParameters locale:(NSString * _Nullable)locale uiCustomization:(NCAUiCustomization * _Nullable)uiCustomization error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Starting with protocol version 2.3.1, integrators should pass the UICustomization as a map.");
/// Initializes the 3DS SDK instance.
/// \param configParameters Configuration information that shall be used during initialization.
///
/// \param locale String that represents the locale for the app’s user interface.
///
/// \param uiCustomizationMap UI configuration information that is used to specify the UI layout and theme. For example, font style and font size.
/// Use UICustomizationType raw values as String keys for the uiCustomization dictionary. Each key represents a UI customization for a particular iOS appearance.
///
///
/// throws:
/// InvalidInput, SDKAlreadyInitialized, SDKRuntime
- (BOOL)initialize:(NCAConfigParameters * _Nonnull)configParameters locale:(NSString * _Nullable)locale uiCustomizationMap:(NSDictionary<NSString *, NCAUiCustomization *> * _Nullable)uiCustomizationMap error:(NSError * _Nullable * _Nullable)error;
/// Initializes the 3DS SDK instance.
/// \param configParameters Configuration information that shall be used during initialization.
///
/// \param locale String that represents the locale for the app’s user interface.
///
/// \param uiCustomizationMap UI configuration information that is used to specify the UI layout and theme. For example, font style and font size.
/// Use UICustomizationType raw values as String keys for the uiCustomization dictionary. Each key represents a UI customization for a particular iOS appearance.
///
/// \param success A closure that is called when the initialization finishes successfully.
///
/// \param failure A closure that is called when the initialization finishes unsuccessfully. The failure closure takes an Error parameter that contains the failure details.
///
- (void)initialize:(NCAConfigParameters * _Nonnull)configParameters locale:(NSString * _Nullable)locale uiCustomizationMap:(NSDictionary<NSString *, NCAUiCustomization *> * _Nullable)uiCustomizationMap success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Creates an instance of Transaction through which the 3DS Requestor App gets the data that
/// is required to perform the transaction.
/// \param directoryServerId Registered Application Provider Identifier (RID) that is unique to
/// the Payment System.
///
/// \param messageVersion Protocol version according to which the transaction shall be created.
///
///
/// throws:
/// InvalidInput, SDKNotInitialized, SDKRuntime.
- (id <NCATransaction> _Nullable)createTransactionWithDirectoryServerId:(NSString * _Nonnull)directoryServerId messageVersion:(NSString * _Nullable)messageVersion error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns the warnings produced by the 3DS SDK during initialization.
///
/// throws:
/// SDKNotInitialized.
///
/// returns:
/// Returns an Array of warnings produced by the 3DS SDK during initialization.
- (NSArray<NCAWarning *> * _Nullable)getWarningsAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns the version of the 3DS SDK that is integrated with the 3DS Requestor App.
///
/// throws:
/// SDKNotInitialized, SDKRuntime
///
/// returns:
/// returns (as a string) the version of the 3DS SDK that is integrated with the 3DS
/// Requestor App.
- (NSString * _Nullable)getSDKVersionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Frees up resources that are used by the 3DS Requestor App until it is closed. It shall be called only once during a single 3DS Requestor App session.
///
/// throws:
/// SDKNotInitialized
- (BOOL)cleanupAndReturnError:(NSError * _Nullable * _Nullable)error;
@end

@class NSBundle;

SWIFT_CLASS_NAMED("ThreeDS2ServiceSDK")
@interface NCAThreeDS2ServiceSDK : NSObject <NCAThreeDS2Service>
/// Creates ThreeDS2ServiceSDK object
/// \param bundle The bundle from which the SDK will read resources
///
- (nonnull instancetype)initWithBundle:(NSBundle * _Nonnull)bundle OBJC_DESIGNATED_INITIALIZER;
/// Creates ThreeDS2ServiceSDK object.
/// The resources will be taken from the main application bundle.
- (nonnull instancetype)init;
- (BOOL)initialize:(NCAConfigParameters * _Nonnull)configParameters locale:(NSString * _Nullable)locale uiCustomization:(NCAUiCustomization * _Nullable)uiCustomization error:(NSError * _Nullable * _Nullable)error;
- (BOOL)initialize:(NCAConfigParameters * _Nonnull)configParameters locale:(NSString * _Nullable)locale uiCustomizationMap:(NSDictionary<NSString *, NCAUiCustomization *> * _Nullable)uiCustomizationMap error:(NSError * _Nullable * _Nullable)error;
- (void)initialize:(NCAConfigParameters * _Nonnull)configParameters locale:(NSString * _Nullable)locale uiCustomizationMap:(NSDictionary<NSString *, NCAUiCustomization *> * _Nullable)uiCustomizationMap success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (id <NCATransaction> _Nullable)createTransactionWithDirectoryServerId:(NSString * _Nonnull)directoryServerId messageVersion:(NSString * _Nullable)messageVersion error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NCAWarning *> * _Nullable)getWarningsAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getSDKVersionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)cleanupAndReturnError:(NSError * _Nullable * _Nullable)error;
@end


@interface NCAThreeDS2ServiceSDK (SWIFT_EXTENSION(ThreeDS_SDK)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@class NSURL;
@class NSUserActivity;

/// ThreeDS SDK application delegate class that handles the events when the application is opened with
/// a url scheme link or universal link.
/// Usage: The main application delegate class needs to provide the URL or the NSUserActivity to the ThreeDS SDK
/// depending whether you use URL Scheme or Universal Links
/// In your AppDelegate, implement the following methods and call the respective methods from ThreeDSSDKAppDelegate
/// Example:
/// // URL Scheme
/// func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
/// return ThreeDSSDKAppDelegate.shared.appOpenedWith(url)
/// }
/// \code
/// // Universal Links
/// func application(_ application: UIApplication, continue userActivity:
///                 NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {
///     return ThreeDSSDKAppDelegate.shared.appOpenedWith(userActivity)
/// }
///
/// \endcode
SWIFT_CLASS_NAMED("ThreeDSSDKAppDelegate")
@interface NCAThreeDSSDKAppDelegate : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NCAThreeDSSDKAppDelegate * _Nonnull shared;)
+ (NCAThreeDSSDKAppDelegate * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Called when app is opened by an URL using URL Scheme
/// \param url The url that the app was opened with.
///
///
/// returns:
/// ‘true’ if the ThreeDS SDK can handle the url, ‘false’ otherwise.
- (BOOL)appOpenedWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Called when app is opened by NSUserActivity using Universal Links
/// \param userActivity The user activity that the app was opened with.
///
///
/// returns:
/// ‘true’ if the ThreeDS SDK can handle the userActivity, ‘false’ otherwise.
- (BOOL)appOpenedWithUserActivity:(NSUserActivity * _Nonnull)userActivity SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Provides methods for the 3DS Requestor App to pass toolbar customization parameters to the 3DS SDK.
SWIFT_CLASS_NAMED("ToolbarCustomization")
@interface NCAToolbarCustomization : NCACustomization
/// Sets the background color for the toolbar.
/// \param hexColorCode Color code in Hex format.
///
///
/// throws:
/// InvalidInputExpection
- (BOOL)setBackgroundColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error;
/// Sets the dark background color for the toolbar.
/// \param hexColorCode Color code in Hex format.
///
///
/// throws:
/// InvalidInputExpection
- (BOOL)setDarkBackgroundColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("\n    Starting with protocol version 2.3.1, for dark mode UI customization,\n    the integrators shall use setBackgroundColor(...) and insert\n    the UiCustomization object into the uiCustomizationMap with key \"DARK\".\n    ");
/// Sets the header text of the toolbar.
/// \param headerText Text for the header.
///
///
/// throws:
/// InvalidInput
- (BOOL)setHeaderTextWithHeaderText:(NSString * _Nonnull)headerText error:(NSError * _Nullable * _Nullable)error;
/// Sets the button text of the toolbar.
/// \param buttonText Text for the button. For example, “Cancel”.
///
///
/// throws:
/// InvalidInput
- (BOOL)setButtonTextWithButtonText:(NSString * _Nonnull)buttonText error:(NSError * _Nullable * _Nullable)error;
/// Returns the background colour for the toolbar.
///
/// returns:
/// Background colour code (as a String) for the toolbar.
- (NSString * _Nonnull)getBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the header text of the toolbar.
///
/// returns:
/// The header text (as a String) of the toolbar.
- (NSString * _Nonnull)getHeaderText SWIFT_WARN_UNUSED_RESULT;
/// Returns the button text of the toolbar.
///
/// returns:
/// The button text (as a String) of the toolbar.
- (NSString * _Nonnull)getButtonText SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;

/// Holds parameters that are required to create AReq messages and to perform the Challenge Flow
SWIFT_PROTOCOL_NAMED("Transaction")
@protocol NCATransaction
/// Returns device and 3DS SDK information to the 3DS Requestor App.
///
/// returns:
/// Returns an AuthenticationRequestParameters object that contains device
/// information and 3DS SDK information.
- (NCAAuthenticationRequestParameters * _Nullable)getAuthenticationRequestParametersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Initiates the challenge process.
/// \param challengeParameters ACS details required by the 3DS SDK to conduct the challenge
/// process during the transaction.
///
/// \param challengeStatusReceiver Callback object for notifying the 3DS Requestor App about the
/// challenge status.
///
/// \param timeOut Timeout interval (in minutes) within which the challenge process must be
/// completed. The minimum timeout interval shall be 5 minutes.
///
///
/// throws:
/// Invalid input exception.
- (BOOL)doChallengeWithChallengeParameters:(NCAChallengeParameters * _Nonnull)challengeParameters challengeStatusReceiver:(id <NCAChallengeStatusReceiver> _Nonnull)challengeStatusReceiver timeOut:(NSInteger)timeOut inViewController:(UIViewController * _Nonnull)inViewController error:(NSError * _Nullable * _Nullable)error;
/// Returns an instance of Progress View (processing screen) that the 3DS Requestor App uses.
///
/// returns:
/// Returns a ProgressDialog object.
- (id <NCAProgressDialog> _Nullable)getProgressViewAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Cleans up resources that are held by the Transaction object.
- (BOOL)closeAndReturnError:(NSError * _Nullable * _Nullable)error;
@end















enum NCAButtonType : NSInteger;

/// Provides the functionality required for 3DS SDK UI customization.
SWIFT_CLASS_NAMED("UiCustomization")
@interface NCAUiCustomization : NSObject <NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the attributes of a ButtonCustomization object for a particular button type.
/// \param buttonCustomization A ButtonCustomization object.
///
/// \param buttonType The ButtonType.
///
- (void)setButtonCustomizationWithButtonCustomization:(NCAButtonCustomization * _Nonnull)buttonCustomization buttonType:(enum NCAButtonType)buttonType;
/// Sets the attributes of a ButtonCustomization object for an implementer-specific button type.
/// \param buttonCustomization A ButtonCustomization object.
///
/// \param btnType Implementer-specific button type.
///
- (BOOL)setButtonCustomizationWithButtonCustomization:(NCAButtonCustomization * _Nonnull)buttonCustomization btnType:(NSString * _Nonnull)btnType error:(NSError * _Nullable * _Nullable)error;
/// Sets the attributes of a ToolbarCustomization object.
/// \param toolbarCustomization A ToolbarCustomization object.
///
- (void)setToolbarCustomizationWithToolbarCustomization:(NCAToolbarCustomization * _Nonnull)toolbarCustomization;
/// Sets the attributes of a LabelCustomization object.
/// \param labelCustomization A LabelCustomization object.
///
- (void)setLabelCustomizationWithLabelCustomization:(NCALabelCustomization * _Nonnull)labelCustomization;
/// Sets the attributes of a TextBoxCustomization object.
/// \param textBoxCustomization A TextBoxCustomization object.
///
- (void)setTextBoxCustomizationWithTextBoxCustomization:(NCATextBoxCustomization * _Nonnull)textBoxCustomization;
/// Returns a ButtonCustomization object.
/// \param buttonType A pre-defined list of button types.
///
///
/// returns:
/// returns A Button Customization object.
- (NCAButtonCustomization * _Nullable)getButtonCustomizationWithButtonType:(enum NCAButtonType)buttonType SWIFT_WARN_UNUSED_RESULT;
/// Returns a ButtonCustomization object for an implementer-specific button type.
/// \param btnType Implementer-specific button type.
///
///
/// returns:
/// A ButtonCustomization object.
- (NCAButtonCustomization * _Nullable)getButtonCustomizationWithBtnType:(NSString * _Nonnull)btnType SWIFT_WARN_UNUSED_RESULT;
/// Returns a ToolbarCustomization object.
///
/// returns:
/// A ToolbarCustomization object.
- (NCAToolbarCustomization * _Nullable)getToolbarCustomization SWIFT_WARN_UNUSED_RESULT;
/// Returns a LabelCustomization object.
///
/// returns:
/// A LabelCustomization object.
- (NCALabelCustomization * _Nullable)getLabelCustomization SWIFT_WARN_UNUSED_RESULT;
/// Returns a TextBoxCustomization object.
///
/// returns:
/// A TextBoxCustomization object.
- (NCATextBoxCustomization * _Nullable)getTextboxCustomization SWIFT_WARN_UNUSED_RESULT;
/// Method creating a deep copy of the given object.
/// \param zone Nil
///
///
/// returns:
/// Deep copy of the given object.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface NCAUiCustomization (SWIFT_EXTENSION(ThreeDS_SDK))
@end

/// Enum type describing the types of buttons
/// <ul>
///   <li>
///     SUBMIT: Submit button
///   </li>
///   <li>
///     CONTINUE: Continue button
///   </li>
///   <li>
///     NEXT: Next button
///   </li>
///   <li>
///     CANCEL: Cancelation button
///   </li>
///   <li>
///     RESEND: Resend button
///   </li>
///   <li>
///     ADD_CH: Additional choice button
///   </li>
///   <li>
///     OPEN_OOB_APP: OOB app button
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, NCAButtonType, "ButtonType", open) {
  NCAButtonTypeSUBMIT = 0,
  NCAButtonTypeCONTINUE = 1,
  NCAButtonTypeNEXT = 2,
  NCAButtonTypeCANCEL = 3,
  NCAButtonTypeRESEND = 4,
  NCAButtonTypeADD_CH = 5,
  NCAButtonTypeOPEN_OOB_APP = 6,
};

/// Enumeration represeting the UI Customization types
typedef SWIFT_ENUM_NAMED(NSInteger, NCAUICustomizationType, "UICustomizationType", open) {
  NCAUICustomizationTypeDEFAULT = 0,
  NCAUICustomizationTypeDARK = 1,
  NCAUICustomizationTypeMONOCHROME = 2,
};


/// Represent a warning that is produced by the 3DS SDK while performing security checks during initialization.
SWIFT_CLASS_NAMED("Warning")
@interface NCAWarning : NSObject
/// Constructs a Warning object.
/// \param warningId Warning ID
///
/// \param message Warning message
///
/// \param severity Warning severity level
///
- (nonnull instancetype)initWithWarningId:(NSString * _Nonnull)warningId message:(NSString * _Nonnull)message severity:(enum NCASeverity)severity OBJC_DESIGNATED_INITIALIZER;
/// Return the warning ID
///
/// returns:
/// The warning ID as a string.
- (NSString * _Nonnull)getID SWIFT_WARN_UNUSED_RESULT;
/// Returns the warning message.
///
/// returns:
/// The warning message as a string.
- (NSString * _Nonnull)getMessage SWIFT_WARN_UNUSED_RESULT;
/// Return the severity level of the warning produced by the 3DS SDK.
///
/// returns:
/// The severity level of the warning as a Severity enum type.
- (enum NCASeverity)getSeverity SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NCAWarning (SWIFT_EXTENSION(ThreeDS_SDK)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_EXTERN void callbackDebugger(void);


SWIFT_EXTERN void callbackIntegrity(void);


SWIFT_EXTERN void callbackJailbreak(void);


SWIFT_EXTERN NSArray<NCAWarning *> * _Nonnull detectedWarnings(void) SWIFT_WARN_UNUSED_RESULT;

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
